<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="/styles/modal_banner.css" />
    
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    <script src="/scripts/modal_banner.js"></script>

    <!-- Your custom CSS -->
    <style>
        .rotate-text {
            transform: rotate(-90deg);
            font-size: small;
        }

        .small-text {
            font-size: small;
        }
    </style>

    <title>Aqualink Automate</title>
</head>
<body>
    <!-- Title banner -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1">Pool Controller {{controller_type}} (Firmware {{controller_firmware}})</span>
            <span class="navbar-text ml-auto">Date Time: {{controller_date}} {{controller_time}}</span>
        </div>
    </nav>

    <div class="mt-3"></div>

    <!-- First row - 4 panels -->
    <div class="container">
        <div class="row gap-3 d-flex justify-content-around">
            {{#main_action_buttons}}
            <button type="button" class="col-lg-2 col-md-5 btn btn-outline-secondary" id="{{main_action_button_id}}" onclick="handleButtonPress(this)">
                <h2 id="{{main_action_button_id}}_button_label">{{main_action_button_label}}</h2>
                <p id="{{main_action_button_id}}_status_id">{{main_action_button_status}}</p>
            </button>
            {{/main_action_buttons}}
        </div>
    </div>

    <div class="mt-3"></div>

    <!-- Second Row - 3 panels -->
    <div class="container">
        <div class="row mt-3">

            <!-- Temperature Panel -->
            <div class="col-lg-4 col-md-12">
                <div class="card h-100">
                    <div class="row no-gutters align-items-center">
                        <div class="col-2 d-flex justify-content-center">
                            <div class="rotate-text">Temperature</div>
                        </div>
                        <div class="col-10">
                            <div class="card-body text-center">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h2 id="poolTemp">{{pool_temperature}}</h2>
                                        <p class="small-text">Pool</p>
                                    </div>
                                    <div class="col">
                                        <h2 id="spaTemp">{{spa_temperature}}</h2>
                                        <p class="small-text">Spa</p>
                                    </div>
                                    <div class="col">
                                        <h2 id="airTemp">{{air_temperature}}</h2>
                                        <p class="small-text">Air</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chemistry Panel -->
            <div class="col-lg-4 col-md-12">
                <div class="card h-100">
                    <div class="row no-gutters align-items-center">
                        <div class="col-2 d-flex justify-content-center">
                            <div class="rotate-text">Chemistry</div>
                        </div>
                        <div class="col-10">
                            <div class="card-body text-center">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h2 id="orp">{{water_orp}}</h2>
                                        <p class="small-text">ORP</p>
                                    </div>
                                    <div class="col">
                                        <h2 id="ph">{{water_ph}}</h2>
                                        <p class="small-text">pH</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Panel -->
            <div class="col-lg-4 col-md-12">
                <div class="card h-100">
                    <div class="row no-gutters align-items-center">
                        <div class="col-2 d-flex justify-content-center">
                            <div class="rotate-text">User</div>
                        </div>
                        <div class="col-10">
                            <div class="card-body">
                                <!-- Add User information here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3"></div>

    <div class="container">
        <div class="row gap-2 d-flex justify-content-around">
            {{#triggerable_buttons}}
            <button type="button" class="col-lg-3 col-3 btn btn-light" id="{{triggerable_button_id}}" onclick="handleButtonPress(this)">
                <strong><p id="{{triggerable_button_id}}_button_label">{{triggerable_button_label}}</p></strong>
                <p id="{{triggerable_button_id}}_status_id">{{triggerable_button_status}}</p>
            </button>
            {{/triggerable_buttons}}
        </div>
    </div>

    <div class="mt-3"></div>

    <!-- Continue with other rows here as necessary... -->

    <footer class="footer mt-auto py-3 bg-light">
        <div class="container">
            <div class="row">
                <!-- Left side - Version -->
                <div class="col text-muted text-start">
                    Version {{aqualink_automate_version}} ({{aqualink_automate_gitinfo}})
                </div>

                <!-- Right side - Links -->
                <div class="col text-muted text-end">
                    <a href="{{aqualink_automate_github}}/LICENSE.txt">Copyright License</a> |
                    <a href="{{aqualink_automate_github}}">GitHub</a>
                </div>
            </div>
        </div>
    </footer>

    <!-- Toggleable Banner Modal -->
    <div class="modal fade" id="toggleBanner" tabindex="-1" aria-labelledby="toggleBannerLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-fullscreen">
            <div class="modal-content" style="background-color: rgba(255, 255, 224, 0.7); height: 300px;">
                <!-- rgba for translucent yellow -->
                <div class="modal-body d-flex flex-column justify-content-start align-items-center">
                    <h2 class="modal-title text-center mt-3" id="toggleBannerLabel">Headline Text</h2>
                    <p class="text-center mt-3" id="toggleBannerDescription">Description Text</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        function configurePageOnLoad() {
            configureTriggerableActionButtons();
            configureWebSocketMessageHandlers();

            showBanner('Attention!', 'System initialising...');
        }

        function configureTriggerableActionButtons() {

        }

        function configureWebSocketMessageHandlers() {
            const eventHandlers = {};

            function addEventHandler(eventName, handlerFunction) {
                console.debug('Adding event handler for event: ', eventName);
                if (!eventHandlers[eventName]) {
                    eventHandlers[eventName] = [];
                }
                eventHandlers[eventName].push(handlerFunction);
            }

            const wsUrl = ((window.location.protocol === "https:") ? "wss://" : "ws://") + window.location.host + "/ws/equipment";
            const socket = new WebSocket(wsUrl);

            socket.addEventListener('open', function (event) { });
            socket.addEventListener('close', function (event) { });
            socket.addEventListener('error', event => console.error('WebSocket error: ', event));

            socket.addEventListener('message', function (event) {
                const data = JSON.parse(event.data);
                if (data && data.type && eventHandlers[data.type]) {
                    eventHandlers[data.type].forEach((handler) => handler(data.payload));
                }
                else {
                    console.error('No event handler registered for event: ', data.type);
                }
            });

            addEventHandler('ChemistryUpdate', (payload) => {
                console.debug('ChemistryUpdate: ', payload);
                if (payload && payload.orp_level) {
                    document.getElementById('orp').innerText = payload.orp;
                }
                if (payload && payload.ph_level) {
                    document.getElementById('ph').innerText = payload.ph;
                }
            });

            addEventHandler('TemperatureUpdate', (payload) => {
                console.debug('TemperatureUpdate: ', payload);
                if (payload && payload.pool_temp) {
                    document.getElementById('poolTemp').innerText = payload.pool_temp;
                }
                if (payload && payload.spa_temp) {
                    document.getElementById('spaTemp').innerText = payload.spa_temp;
                }
                if (payload && payload.air_temp) {
                    document.getElementById('airTemp').innerText = payload.air_temp;
                }
            });

            addEventHandler('Pong_KeepAlive', (payload) => {
                console.debug('Pong_KeepAlive: ', payload);
            });

            addEventHandler('SystemStatusChange', (payload) => {
                console.debug('SystemStatusChange: ', payload);
            });

            setInterval(() => {
                if (WebSocket.OPEN === socket.readyState) {
                    socket.send(JSON.stringify({ type: 'Ping_KeepAlive', payload: null }));
                }
            }, 5000);
        }

        function fetchAndUpdateButtonState(el) {
            const elementId = el.id;
            const fetchPromise = fetch('/api/equipment' + elementId);

            fetchPromise
                .then(handleErrorsDuringFetch)
                .then(response => response.json())
                .then(response => updateButtonState(elementId, response))
                .catch(error => console.error(error));
        }

        function handleButtonPress(el) {
            const elementId = el.id;
            const updatedStatusPromise = fetch('/api/equipment/buttons/' + elementId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ elementId })
            });

            updatedStatusPromise
                .then(handleErrorsDuringFetch)
                .then(response => response.json())
                .then(response => updateButtonState(elementId, response))
                .catch(error => console.error(error));
        }

        function handleErrorsDuringFetch(response) {
            if (!response.ok) {
                throw Error(response.statusText);
            }
            return response;
        }

        function updateButtonState(el_id, response) {
            document.getElementById(el_id + "_button_label").innerHTML = response.label;
            document.getElementById(el_id + "_status_id").innerHTML = response.status ? response.status : "Unknown";
        }

        window.onload = configurePageOnLoad;
    </script>
</body>
</html>

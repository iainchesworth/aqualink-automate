name: Automated CI

on:
  push:
    branches: [ "develop", "main", "feature/**", "bug/**" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  Build:
    name: Building On ${{ matrix.os }} Using ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        compiler: [gcc-13]
        include:
        - os: ubuntu-22.04
          compiler: gcc-13
        - os: windows-2022
          compiler: msvc

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Initialize CodeQL
      if: ${{ contains(matrix.os, 'ubuntu') }}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Install sonar-scanner and build-wrapper
      if: ${{ contains(matrix.os, 'ubuntu') }}
      uses: sonarsource/sonarcloud-github-c-cpp@v2
    
    - name: Configure CMake Preset
      id: set_cmake_preset
      shell: bash
      run: |
        COMPILER=$(echo "${{ matrix.compiler }}" | awk -F- '{print $1}')
        PLATFORM=$(echo "${{ matrix.os }}" | awk -F- '{print $1}')
        if [ "$PLATFORM" = "ubuntu" ]; then
          PLATFORM="linux"
        fi
        echo "::set-output name=cmake_preset::ci-$COMPILER-$PLATFORM-x86_64"

    - name: Fix MSVC 14.35 and 14.37 on GH CI
      # See GH runner issue https://github.com/actions/runner-images/issues/8259.
      if: ${{ contains(matrix.os, 'windows') && contains(matrix.compiler, 'msvc') }}
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $componentsToRemove= @(
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.x86.x64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.x86.x64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM64.Spectre"
        )
        [string]$workloadArgs = $componentsToRemove | ForEach-Object {" --remove " +  $_}
        $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
        # should be run twice
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden

    - uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') && contains(matrix.compiler, 'msvc') }}
        cmake: true
        ninja: true
        vcpkg: false
        ccache: false
        clangtidy: false
        cppcheck: false
        doxygen: false
        gcovr: false
        make: false
        task: false
        nala: false

    - uses: lukka/run-vcpkg@v11
      with: 
        vcpkgDirectory: '${{github.workspace}}/deps/vcpkg'

    - uses: lukka/run-cmake@v10
      with:
        configurePreset: '${{ steps.set_cmake_preset.outputs.cmake_preset }}'
        buildPreset: '${{ steps.set_cmake_preset.outputs.cmake_preset }}'

  Test:
    name: Running Unit Tests On ${{ matrix.os }}
    needs: [Build]
    runs-on: ${{ matrix.os }}
    steps: 
    - uses: lukka/run-cmake@v10
      with:
        testPreset: '${{ steps.set_cmake_preset.outputs.cmake_preset }}'

  Package:
    name: Packaging Build for ${{ matrix.os }}
    needs: [Test]
    runs-on: ${{ matrix.os }}
    steps:
    - working-directory: ${{github.workspace}}/build
      run: |
        cmake --build ${{github.workspace}}/build/${{ steps.set_cmake_preset.outputs.cmake_preset }} --target pack-aqualink-automate 
    
    - name: Upload Binary Packages
      uses: actions/upload-artifact@v3
      with:
        name: package-artefacts
        path: |
          ${{github.workspace}}/packages/*.deb
          ${{github.workspace}}/packages/*.rpm
          ${{github.workspace}}/packages/*.tgz
          ${{github.workspace}}/packages/*.zip
        retention-days: 1

  CodeScanning_CodeQL:
    name: Static Analysis Job -> CodeQL
    needs: [Build]
    runs-on: ubuntu-22.04
    steps:
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  CodeScanning_SonarCloud:
    name: Static Analysis Job -> SonarCloud
    needs: [Build]
    runs-on: ubuntu-22.04
    steps:
    - working-directory: ${{github.workspace}}/build
      run: |
        echo "Placeholder for code scanning."

  CodeScanning_MSVCCodeAnalysis:
    name: Static Analysis Job -> MSVC Code Analysis
    needs: [Build]
    runs-on: windows-2022
    steps:
    -  uses: microsoft/msvc-code-analysis-action@v0.1.1
       id: run-analysis
       with:
         cmakeBuildDirectory: ${{github.workspace}}/build/ci-msvc-windows-x86_64
         buildConfiguration: ci-msvc-windows-x86_64
         ruleset: NativeRecommendedRules.ruleset
         ignoredPaths: ${{github.workspace}}/deps;${{github.workspace}}/test

    - name: Upload SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.run-analysis.outputs.sarif }}

    - name: Upload SARIF as an Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sarif-file
        path: ${{ steps.run-analysis.outputs.sarif }}

  Release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [Build, Test, Package]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Download Binary Packages
      uses: actions/download-artifact@v3
      with: 
        name: package-artefacts
        path: ${{github.workspace}}/packages

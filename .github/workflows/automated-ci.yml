name: Automated CI

on:
  push:
    branches: [ "develop", "main", "feature/**", "bug/**" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  Build:
    name: Building ${{ matrix.cmake_preset }} (${{ matrix.os }} With ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        include:
        - os: ubuntu-22.04
          cmake_preset: ci-gcc-linux-x86_64
          compiler: gcc-13
        - os: windows-2022
          cmake_preset: ci-msvc-windows-x86_64
          compiler: msvc
    outputs:
      cmake_preset: ${{ matrix.cmake_preset }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Fix MSVC 14.35 vs. 14.37 on GH CI
      # See GH runner issue https://github.com/actions/runner-images/issues/8259.
      if: ${{ contains(matrix.os, 'windows') }}
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $componentsToRemove= @(
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ARM64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.x86.x64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.x86.x64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.ATL.ARM64.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM.Spectre"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM64"
            "Microsoft.VisualStudio.Component.VC.14.35.17.5.MFC.ARM64.Spectre"
        )
        [string]$workloadArgs = $componentsToRemove | ForEach-Object {" --remove " +  $_}
        $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
        # should be run twice
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden

    - uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        cmake: true
        ninja: true
        vcpkg: false
        ccache: false
        clangtidy: false
        cppcheck: false
        doxygen: false
        gcovr: false
        make: false
        task: false
        nala: false

    - uses: lukka/run-vcpkg@v11
      with: 
        vcpkgDirectory: '${{github.workspace}}/deps/vcpkg'

    - uses: lukka/run-cmake@v10
      with:
        configurePreset: '${{ matrix.cmake_preset }}'
        buildPreset: '${{ matrix.cmake_preset }}'

    - uses: actions/upload-artifact@v3
      with:
        name: build-artefacts-${{ matrix.cmake_preset }}
        path: |
          ${{github.workspace}}/build/${{ matrix.cmake_preset }}/
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/**/*.ilk
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/**/*.lib
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/**/*.pdb
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/**/*.a
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/CMakeFiles/
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/deps/
          !${{github.workspace}}/build/${{ matrix.cmake_preset }}/vcpkg/

  Test:
    name: Running Unit Tests On ${{ matrix.os }}
    needs: [Build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        include:
        - os: ubuntu-22.04
          cmake_preset: ci-gcc-linux-x86_64
        - os: windows-2022
          cmake_preset: ci-msvc-windows-x86_64

    steps: 
    - uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ matrix.cmake_preset }}
        path: ${{github.workspace}}/build/${{ matrix.cmake_preset }}

    - uses: lukka/run-cmake@v10
      with:
        testPreset: '${{ matrix.cmake_preset }}'

  Package:
    name: Packaging Build for ${{ matrix.os }}
    needs: [Test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        include:
        - os: ubuntu-22.04
          cmake_preset: ci-gcc-linux-x86_64
        - os: windows-2022
          cmake_preset: ci-msvc-windows-x86_64

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ matrix.cmake_preset }}
        path: ${{github.workspace}}/build/${{ matrix.cmake_preset }}

    - working-directory: ${{github.workspace}}/build
      run: |
        cmake --build ${{github.workspace}}/build/${{ matrix.cmake_preset }} --target pack-aqualink-automate 
    
    - name: Upload Binary Packages
      uses: actions/upload-artifact@v3
      with:
        name: package-artefacts-${{ matrix.cmake_preset }}
        path: |
          ${{github.workspace}}/packages/*.deb
          ${{github.workspace}}/packages/*.rpm
          ${{github.workspace}}/packages/*.tgz
          ${{github.workspace}}/packages/*.zip
        retention-days: 1

  Release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [Build, Test, Package]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        include:
        - os: ubuntu-22.04
          cmake_preset: ci-gcc-linux-x86_64
        - os: windows-2022
          cmake_preset: ci-msvc-windows-x86_64

    steps:
    - name: Download Binary Packages
      uses: actions/download-artifact@v3
      with: 
        name: package-artefacts-${{ matrix.cmake_preset }}
        path: ${{github.workspace}}/packages

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.umd.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0/index.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

    <title>Equipment Message Stats</title>
</head>
<body>
    <!-- Title banner -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1">Pool Controller {{controller_type}} (Firmware {{controller_firmware}})</span>
            <span class="navbar-text ml-auto">Date Time: {{controller_date}} {{controller_time}}</span>
        </div>
    </nav>

    <div class="container-fluid">

        <div class="mt-3"></div>

        <div class="container">
            <table id="stats-table" class="table">
                <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Count</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be added here by JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Serial Metrics Section -->
        <div class="container mt-5">
            <h2>Serial Metrics</h2>
            <table id="serial-metrics-table" class="table">
                <thead>
                    <tr>
                        <th scope="col">Metric</th>
                        <th scope="col">Total Bytes</th>
                        <th scope="col">Util % (Last 1s)</th>
                        <th scope="col">Util % (Last 30s)</th>
                        <th scope="col">Util % (Last 5m)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr id="serial-metrics-table-row_read">
                        <td>Read</td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr id="serial-metrics-table-row_write">
                        <td>Write</td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- ChartJS Graph -->
        <div class="container mt-5">
            <h2>Utilisation Chart</h2>
            <canvas id="serial-utilisation-chart"></canvas>
        </div>

        <!-- Continue with other rows here as necessary... -->
    </div>

    <div class="mt-3"></div>

    <footer class="footer mt-auto py-3 bg-light">
        <div class="container">
            <div class="row">
                <!-- Left side - Version -->
                <div class="col text-muted text-start">
                    Version {{aqualink_automate_version}} ({{aqualink_automate_gitinfo}})
                </div>

                <!-- Right side - Links -->
                <div class="col text-muted text-end">
                    <a href="{{aqualink_automate_github}}/LICENSE.txt">Copyright License</a> |
                    <a href="{{aqualink_automate_github}}">GitHub</a>
                </div>
            </div>
        </div>
    </footer>

    <script>
        let utilisationChart;
        let timeData = [];
        let readUtilData = [];
        let writeUtilData = [];
        let maxDataPoints = 500;  // Maximum data points to show on graph

        function configurePageOnLoad() {
            configureSerialUtilisationChart();
            configureWebSocketMessageHandlers();
        }

        function configureSerialUtilisationChart() {
            const ctx = document.getElementById('serial-utilisation-chart').getContext('2d');
            utilisationChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: timeData,
                    datasets: [
                        {
                            label: 'Read Utilisation %',
                            borderColor: 'blue',
                            data: readUtilData,
                            yAxisID: 'y-axis-util',
                        },
                        {
                            label: 'Write Utilisation %',
                            borderColor: 'red',
                            data: writeUtilData,
                            yAxisID: 'y-axis-util',
                        }
                    ]
                },
                options: {
                    elements: {
                        line: {
                            tension: 1
                        }  
                    },
                    responsive: true,
                    scales: {
                        x: {
                            type: 'time',
                            ticks: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        'y-axis-util': {
                            type: 'linear',
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Utilisation %'
                            }
                        }
                    },
                    plugins: {
                        decimation: {
                            enabled: true,
                            algorithm: 'lttb',  // Using largest-triangle-three-buckets algorithm
                        }
                    }
                }
            });
        }

        function configureWebSocketMessageHandlers() {
            const eventHandlers = {};

            function addEventHandler(eventName, handlerFunction) {
                console.debug('Adding event handler for event: ', eventName);
                if (!eventHandlers[eventName]) {
                    eventHandlers[eventName] = [];
                }
                eventHandlers[eventName].push(handlerFunction);
            }

            const wsUrl = ((window.location.protocol === "https:") ? "wss://" : "ws://") + window.location.host + "/ws/equipment/stats";
            const socket = new WebSocket(wsUrl);

            socket.addEventListener('open', function (event) { });
            socket.addEventListener('close', function (event) { });
            socket.addEventListener('error', event => console.error('WebSocket error: ', event));

            socket.addEventListener('message', function (event) {
                const data = JSON.parse(event.data);
                if (data && data.type && eventHandlers[data.type]) {
                    eventHandlers[data.type].forEach((handler) => handler(data.payload));
                }
                else {
                    console.error('No event handler registered for event: ', data.type);
                }
            });

            addEventHandler('StatisticsUpdate', (payload) => {
                console.debug('StatisticsUpdate: ', payload);
                if (payload && payload.message_counts) {
                    updateStatisticsTable(payload.message_counts);
                }

                read_metrics_row = document.getElementById("serial-metrics-table-row_read");
                read_metrics_row.cells[1].innerHTML = payload.bandwidth_read.total_bytes;
                read_metrics_row.cells[2].innerHTML = Number.parseFloat(payload.bandwidth_read.average_utilisation_1sec).toFixed(2);
                read_metrics_row.cells[3].innerHTML = Number.parseFloat(payload.bandwidth_read.average_utilisation_30sec).toFixed(2);
                read_metrics_row.cells[4].innerHTML = Number.parseFloat(payload.bandwidth_read.average_utilisation_5mins).toFixed(2);

                write_metrics_row = document.getElementById("serial-metrics-table-row_write");
                write_metrics_row.cells[1].innerHTML = payload.bandwidth_write.total_bytes;
                write_metrics_row.cells[2].innerHTML = Number.parseFloat(payload.bandwidth_write.average_utilisation_1sec).toFixed(2);
                write_metrics_row.cells[3].innerHTML = Number.parseFloat(payload.bandwidth_write.average_utilisation_30sec).toFixed(2);
                write_metrics_row.cells[4].innerHTML = Number.parseFloat(payload.bandwidth_write.average_utilisation_5mins).toFixed(2);

                if (payload) {

                    let read_util = 0;
                    let write_util = 0;

                    if (payload.bandwidth_read && payload.bandwidth_read.average_utilisation_1sec) {
                        read_util = payload.bandwidth_read.average_utilisation_1sec;
                    }

                    if (payload.bandwidth_write && payload.bandwidth_write.average_utilisation_1sec) {
                        write_util = payload.bandwidth_write.average_utilisation_1sec;
                    }

                    updateUtilisationChart(read_util, write_util);
                }
            });

            addEventHandler('Pong_KeepAlive', (payload) => {
                console.debug('Pong_KeepAlive: ', payload);
            });

            setInterval(() => {
                if (WebSocket.OPEN === socket.readyState) {
                    socket.send(JSON.stringify({ type: 'Ping_KeepAlive', payload: null }));
                }
            }, 5000);
        }

        function updateStatisticsTable(stats) {
            const tableBody = document.getElementById('stats-table').getElementsByTagName("tbody")[0];

            stats.forEach(stat => {
                let newRow;

                // Check if row with this ID already exists
                newRow = document.getElementById("stats-table-row_" + stat.id);

                if (!newRow) {
                    // Insert new row and set ID
                    newRow = tableBody.insertRow();
                    newRow.id = "stats-table-row_" + stat.id;

                    // Create cells for the new row
                    newRow.insertCell(0);
                    newRow.insertCell(1);
                    newRow.insertCell(2);
                }

                // Update cells
                newRow.cells[0].innerHTML = stat.id;
                newRow.cells[1].innerHTML = stat.count;
            });
        }

        function updateUtilisationChart(read_util, write_util) {
            const currentTime = new Date().toISOString();

            timeData.push(currentTime);
            readUtilData.push(read_util);
            writeUtilData.push(write_util);

            // Remove old data to keep max data points
            if (timeData.length > maxDataPoints)
            {
                timeData.shift();
                readUtilData.shift();
                writeUtilData.shift();
            }

            // Update the chart
            utilisationChart.update();
        }

        window.onload = configurePageOnLoad;
    </script>
</body>
</html>
